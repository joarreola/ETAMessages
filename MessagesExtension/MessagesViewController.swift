//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by taiyo on 5/22/17.
//  Copyright Â© 2017 Oscar Arreola. All rights reserved.
//

import UIKit
import Messages
import MapKit
import CoreLocation


class MessagesViewController: MSMessagesAppViewController, MKMapViewDelegate,
                                                    CLLocationManagerDelegate {
    
    @IBOutlet weak var mapView: MKMapView!
    
    var locationManager = CLLocationManager()
    
    var eta = EtaAdapter()

    @IBOutlet weak var display: UILabel!

    // hardcoding for now
    let localUser: Users = Users(name: "Oscar-iphone")
    let remoteUser: Users = Users(name: "Oscar-ipad")
    
    var cloud = CloudAdapter(userName: "Oscar-iphone")
    var poll = Poll(remoteUser: "Oscar-ipad")
    var mapUpdate = MapUpdate()
    var uploading: UploadingManager = UploadingManager(name: "Oscar-iphone")
    
    //var eta: TimeInterval? = nil
    var etaOriginal: TimeInterval = 0.0
    var distance: Double = 0.0
    var locPacket_updated: Bool = false
    var poll_entered: Int = 0

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        print("-- viewDidLoad -----------------------------------------------------")
        
        self.locationManager.delegate = self
        self.locationManager.desiredAccuracy = kCLLocationAccuracyBest
        self.locationManager.requestWhenInUseAuthorization()
        self.locationManager.startUpdatingLocation()
        self.mapView.showsUserLocation = true
        self.mapView.delegate = self

    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        print("-- willBecomeActive ------------------------------------------------")

    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        print("-- didResignActive -------------------------------------------------")
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        print("-- didReceive ------------------------------------------------------")
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        print("-- didStartSending -------------------------------------------------")
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
        print("-- didCancelSending ------------------------------------------------")
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        print("-- willTransition --------------------------------------------------")
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        print("-- didTransition ---------------------------------------------------")
    }
    
    func locationManager(_ manager: CLLocationManager,
                         didUpdateLocations locations: [CLLocation]) {
        // Called by CLLocation framework on device location changes
        
        let location = locations.last
        var lmPacket = Location()
        lmPacket.setLatitude(latitude: location!.coordinate.latitude)
        lmPacket.setLongitude(longitude: location!.coordinate.longitude)
        
        // refresh mapView from locationManager just once
        if !locPacket_updated {
            
            self.mapUpdate.refreshMapView(packet: lmPacket, mapView: mapView, eta: eta)
                                          
            var string = [String]()
            string.append("locationManager...")
            mapUpdate.displayUpdate(display: display, stringArray: string)

        }

        // stuff Location structure if a new location
        if lmPacket.latitude != localUser.location.latitude ||
            lmPacket.longitude != localUser.location.longitude {

            print("-- locationManager -- location: '\(location!)'")

            localUser.location.setLatitude(latitude: lmPacket.latitude)
    
            localUser.location.setLongitude(longitude: lmPacket.longitude)
            
            locPacket_updated = true

            //upload to iCloud if enabled_uploading set in IBAction enable()
            if UploadingManager.enabledUploading
            {
                // refresh mapView
                print("-- locationManager -- refresh mapView")
                
                self.mapUpdate.refreshMapView(packet: localUser.location, mapView: mapView, eta: eta)
    
                // upload coordinates
                let cloudRet = cloud.upload(packet: localUser.location)

                if cloudRet == false
                {
                    print("-- locationManager -- cloud.upload() -- Failed")
                }
                else
                {
                    print("-- locationManager -- cloud.upload() -- succeeded")
    
                    if poll_entered == 0
                    {
                        // display just localUserPacket - will redraw update in
                        // getEtaDistance()
                        var string = [String]()
                        string.append("local:\t( \(localUser.location.latitude),\n")
                        string.append("\t\t\(localUser.location.longitude) )")
                        
                        mapUpdate.displayUpdate(display: display,
                                                stringArray: string)

                    }
                    else
                    {
                        
                        // check for current RemoteUser's location
                        print("-- locationManager -- call check_remote()")

                        if !check_remote() {
                            // failed to fetch RemoteUser's location.
                            // Assumed due to Disabled by RemoteUser
                            //  - reset poll_entered to 0
                            //  - update display
                            var string = [String]()
                            string.append("local:\t( \(localUser.location.latitude),\n")
                            string.append("\t\t\(localUser.location.longitude) )")
                            string.append("- REMOTE USER LOCATION NOT FOUND\n")
                            string.append("- TAP Poll TO RESTART SESSION...")
                            
                            mapUpdate.displayUpdate(display: display,
                                                    stringArray: string)
                            
                        }
                        
                        var string = [String]()
                        string.append("local:\t( \(localUser.location.latitude),\n")
                        string.append("\t\t\(localUser.location.longitude) )")
                        string.append("remote:\t( \(remoteUser.location.latitude),\n")
                        string.append("\t\t\t\(remoteUser.location.longitude) )\n")
                        string.append("eta:\t\t\(String(describing: self.eta.getEta())) sec\n")
                        string.append("distance:\t\(String(describing: self.distance)) ft")
                        
                        mapUpdate.displayUpdate(display: display,
                                                stringArray: string)
                        
                    }
                } // cloud update succeeded
            } // do if enabled_uploading set
        } // do if location coordinates changed
    } // end of locationManager function/callback
    
    @nonobjc func locationManager(manager: CLLocationManager!,
                                  didFailWithError error: NSError!) {

        print("-- locationManager -- didFailWithError: \(error.description)")
        //let alert: UIAlertControllerStyle = UIAlertControllerStyle.alert
        //let errorAlert = UIAlertController(title: "Error",
        //                                   message: "Failed to Get Your Location",
        //                                   preferredStyle: alert)
        //errorAlert.show(UIViewController(), sender: manager)
        
    }


    @IBAction func enable(_ sender: UIBarButtonItem) {
        // Entry point to start uploading the current location to iCloud repository

        print("\n=================================================================")
        print("@IBAction func enable()")
        print("===================================================================")

        // display packet
        var string = [String]()
        string.append("local:\t( \(localUser.location.latitude),\n\t\t\(localUser.location.longitude) )")
        
        uploading.updateMap(display: display, stringArray: string)
        
        // Upload localUserPacket to Cloud repository
        if !uploading.uploadLocation(packet: localUser.location) {
            
            // display localUserPacket
            var string = [String]()
            string.append("local: \t( \(localUser.location.latitude),\n \t\t\(localUser.location.longitude) )")
            string.append("- upload to cloud failed")
            
            uploading.updateMap(display: display, stringArray: string)

            return
        }
        
        // refresh mapView
        self.mapUpdate.refreshMapView(packet: localUser.location, mapView: mapView, eta: eta)
        
        // this allows for uploading of coordinates on LocalUser location changes
        // in locationManager()
        uploading.enableUploading()
        
        print("-- enable -- end\n")
    
    }
    
    @IBAction func poll(_ sender: UIBarButtonItem) {
        // check for remoteUser record

        print("\n==================================================================")
        print("@IBAction func poll()")
        print("====================================================================")

        // stop location updates as this path is for the stationary user
        self.locationManager.stopUpdatingLocation()
        
        // vars
        var latitude: CLLocationDegrees
        var longitude: CLLocationDegrees
        poll_entered += 1
// MARK:
        // FIXME: temporary. will call poll.pollRemote() directly, removing all other code
        // start RemoteUser polling on 2nd tap... for now
        //  eta and distance checked at 1 sec interval
        if poll_entered > 1 {
    

            print("-- Poll -- eta: \(String(describing: self.eta.getEta())) -- distance: \(String(describing: self.eta.getDistance()))")
    
            // add pin on mapView for remoteUser, re-center mapView, update span
            print("-- poll -- mapUpdate.addPin...")
            
            //self.mapUpdate.addPin(packet: localUserPacket, mapView: mapView, remove: false)
            self.mapUpdate.addPin(packet: remoteUser.location, mapView: mapView, remove: false)

            print("-- poll -- mapUpdate.refreshMapView...")
            
            self.mapUpdate.refreshMapView(localPacket: localUser.location,
                                          remotePacket: remoteUser.location,
                                          mapView: mapView, eta: eta)

            // note coordinates set, eta and distance on display
            var string = [String]()
            string.append("local:\t\t( \(localUser.location.latitude),\n\t\t\t\(localUser.location.longitude) )\n")
            string.append("remote:\t( \(remoteUser.location.latitude),\n\t\t\t\(remoteUser.location.longitude) )\n")
            string.append("eta:\t\t\(eta.eta!) sec\n")
            string.append("distance:\t\(eta.distance!) ft")
            
            mapUpdate.displayUpdate(display: display, stringArray: string)

            print("-- poll -- calling poll.pollRemote()")
    
            poll.pollRemote(localPacket: localUser.location, remotePacket: remoteUser.location,
                            mapView: mapView, eta: eta, display: display)
            
            print("-- poll -- poll(): return\n")
            
            return
        }
// MARK:-
        // Upload localUserPacket to Cloud repository
        // Hardcode localuser for now
        print("-- poll --  upload local record once...")
        
        let cloudRet = cloud.upload(packet: localUser.location)

        if cloudRet == false {
            print("-- poll -- cloud.upload(localUserPacket) returned nil. Exiting poll()")
            
            // display localUserPacket
            var string = [String]()
            string.append("local:\t( \(localUser.location.latitude),\n\t\t\(localUser.location.longitude) )\n")
            string.append("- upload to cloud failed")
            
            mapUpdate.displayUpdate(display: display, stringArray: string)
            
            poll_entered = 0;

            print("-- poll -- poll(): return\n")

            return
    
        }
        
        // display localUserPacket
        var string = [String]()
        string.append("local:\t( \(localUser.location.latitude),\n\t\t\(localUser.location.longitude) )")
        
        mapUpdate.displayUpdate(display: display, stringArray: string)


        print("-- poll --  poll.fetchRemote for remote location record...")

        let fetchRet = poll.fetchRemote()
        
        if fetchRet.latitude == nil {
            print("-- poll -- poll.fetchRemote() returned nil. Exiting poll()")
            
            // display localUserPacket
            var string = [String]()
            string.append("local:\t( \(localUser.location.latitude),\n\t\t\(localUser.location.longitude) )")
            string.append("- fetchRemote failed")
            
            mapUpdate.displayUpdate(display: display, stringArray: string)
    
            poll_entered = 0;

            print("-- poll -- poll(): return\n")
    
            return
            
        }
        
        (latitude, longitude) = fetchRet as! (CLLocationDegrees, CLLocationDegrees)
        print("-- poll -- remote latitude: \(latitude)")
        print("-- poll -- remote longitude: \(longitude)")

        // stuff remoteUser Location structure
        remoteUser.location.setLatitude(latitude: latitude)
        remoteUser.location.setLongitude(longitude: longitude)
        
        // note coordinates set on display
        var stringNew = [String]()
        stringNew.append("local:\t\t( \(localUser.location.latitude),\n\t\t\t\(localUser.location.longitude) )\n")
        stringNew.append("remote:\t( \(remoteUser.location.latitude),\n\t\t\t\(remoteUser.location.longitude) )")
        
        mapUpdate.displayUpdate(display: display, stringArray: stringNew)
        
        // get ETA and distance, [and refresh mapview from eta.getEtaDistance: FIX]
        print("-- poll -- eta.getEtaDistance...")
       
        //eta.getEtaDistance (packet: localUserPacket, mapView: mapView, display: display)
        eta.getEtaDistance (localPacket: localUser.location, remotePacket: remoteUser.location)

        // add pin and refresh mapView
        print("-- poll -- mapUpdate.addPin...")
        
        mapUpdate.addPin(packet: remoteUser.location, mapView: mapView, remove: false)

        print("-- poll -- mapUpdate.refreshMapView...")
        mapUpdate.refreshMapView(localPacket: localUser.location,
                                 remotePacket: remoteUser.location,
                                 mapView: mapView, eta: eta)

        print("-- poll -- return\n")

        return
    }
  

    @IBAction func disable(_ sender: UIBarButtonItem) {
        // Remove location record from iCloud repository.

        print("\n==================================================================")
        print("@IBAction func disable()")
        print("====================================================================")

        // clear display
        let string = [String]()
        print("-- disable -- string size: \(string.count)")

        mapUpdate.displayUpdate(display: display, stringArray: string)
        
        cloud.deleteRecord()

        mapUpdate.addPin(packet: localUser.location, mapView: mapView, remove: true)
        
        // refresh mapView for possible poll use
        self.mapUpdate.refreshMapView(packet: localUser.location, mapView: mapView, eta: eta)
        
        // stop location updates as this path is for the stationary user
        self.locationManager.stopUpdatingLocation()

        uploading.disableUploading()
        
    }
    
    func check_remote() -> Bool {
        print("\n=================================================================")
        print("func check_remote()")
        print("===================================================================")

        var latitude: CLLocationDegrees
        var longitude: CLLocationDegrees

        let fetchRet = poll.fetchRemote()
        
        if (fetchRet.latitude == nil) {
            return false
        }
        (latitude, longitude) = fetchRet as! (CLLocationDegrees, CLLocationDegrees)
        
        remoteUser.location.setLatitude(latitude: latitude)
        remoteUser.location.setLongitude(longitude: longitude)

        print("-- check_remote -- mapUpdate.addPin()")
        //mapUpdate.addPin(packet: localUserPacket, mapView: mapView, remove: false)
        mapUpdate.addPin(packet: remoteUser.location, mapView: mapView, remove: false)
    
        //eta.getEtaDistance(packet: localUserPacket, mapView: mapView, display: display)
        print("-- check_remote -- eta.getEtaDistance()")
        
        eta.getEtaDistance(localPacket: localUser.location, remotePacket: remoteUser.location)

        return true
    }

}
