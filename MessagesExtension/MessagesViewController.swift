//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by taiyo on 5/22/17.
//  Copyright Â© 2017 Oscar Arreola. All rights reserved.
//

import UIKit
import Messages
import MapKit
import CoreLocation


class MessagesViewController: MSMessagesAppViewController, MKMapViewDelegate, CLLocationManagerDelegate {
    
    @IBOutlet weak var mapView: MKMapView!
    
    var locationManager = CLLocationManager()
    
    var locPacket = Location()
    var eta = Eta()

    @IBOutlet weak var display: UILabel!
    // hardcoding for now
    var cloud = Cloud(localUser: "Oscar-iphone")
    // hardcoding for now
    var poll = Poll(remoteUser: "Oscar-ipad")
    
    var mapUpdate = MapUpdate()
    
    //var eta: TimeInterval? = nil
    var etaOriginal: TimeInterval = 0.0
    var distance: Double = 0.0
    var locPacket_updated: Bool = false
    var enabled_uploading: Bool = false
    var poll_entered: Int = 0

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        print("-- viewDidLoad ------------------------------------------------------")
        
        self.locationManager.delegate = self
        self.locationManager.desiredAccuracy = kCLLocationAccuracyBest
        self.locationManager.requestWhenInUseAuthorization()
        self.locationManager.startUpdatingLocation()
        self.mapView.showsUserLocation = true
        self.mapView.delegate = self
        /*
        func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
            let renderer = MKPolylineRenderer(polyline: overlay as! MKPolyline)
            renderer.strokeColor = UIColor.blue
            return renderer
        }
        */
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        print("-- willBecomeActive -------------------------------------------------")

    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        print("-- didResignActive --------------------------------------------------")
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        print("-- didReceive -------------------------------------------------------")
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        print("-- didStartSending --------------------------------------------------")
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
        print("-- didCancelSending -------------------------------------------------")
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        print("-- willTransition ---------------------------------------------------")
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        print("-- didTransition ----------------------------------------------------")
    }
    
    func locationManager(_ manager: CLLocationManager,
                         didUpdateLocations locations: [CLLocation]) {
        // Called by CLLocation framework on device location changes
        
        let location = locations.last
        
        // refresh mapView from locationManager just once
        if !locPacket_updated {
            let center = CLLocationCoordinate2D(latitude: location!.coordinate.latitude,
                                            longitude: location!.coordinate.longitude)
        
            let span: MKCoordinateSpan = MKCoordinateSpan(latitudeDelta: 0.05,
                                                      longitudeDelta: 0.05)
        
            let region = MKCoordinateRegion(center: center, span: span)

            // refresh mapView
            print("-- locationManager -- self.mapView.setRegion()")

            self.mapView.setRegion(region, animated: true)
            
            display.text = ""
            display.text = "locationManager..."
        }

        // stuff Location structure if a new location
        if location!.coordinate.latitude != locPacket.latitude ||
            location!.coordinate.longitude != locPacket.longitude
        {

            print("-- locationManager -- location: '\(location!)'")

            locPacket.setLatitude(latitude: location!.coordinate.latitude)
    
            locPacket.setLongitude(longitude: location!.coordinate.longitude)
            
            locPacket_updated = true

            //upload to iCloud if enabled_uploading set in IBAction enable()
            //if enabled_uploading || poll_entered > 0
            if enabled_uploading
            {
                // refresh mapView
                print("-- locationManager -- refresh mapView")
                let center = CLLocationCoordinate2D(latitude: locPacket.latitude,
                                                    longitude: locPacket.longitude)
                let span: MKCoordinateSpan = MKCoordinateSpan(latitudeDelta: 0.1,
                                                              longitudeDelta: 0.1)
                let region = MKCoordinateRegion(center: center, span: span)
                self.mapView.setRegion(region, animated: true)

                // upload coordinates
                let cloudRet = cloud.upload(packet: locPacket)

                if cloudRet == false
                {
                    print("-- locationManager -- cloud.upload() -- Failed")
                }
                else
                {
                    print("-- locationManager -- cloud.upload() -- succeeded")
    
                    if poll_entered == 0
                    {
                        // display just locPacket - will redraw update in
                        // getEtaDistance()
                        
                        display.text = ""
                        display.text =
                        "local:\t( \(locPacket.latitude),\n" +
                        "\t\t\(locPacket.longitude) )"

                    }
                    else
                    {
                        
                        // check for current RemoteUser's location
                        print("-- locationManager -- call check_remote()")

                        if !check_remote() {
                            // failed to fetch RemoteUser's location.
                            // Assumed due to Disabled by RemoteUser
                            //  - reset poll_entered to 0
                            //  - update display
                            display.text = ""
                            display.text =
                                "local:\t\t( \(locPacket.latitude),\n" +
                                "\t\t\t\(locPacket.longitude) )\n" +
                                "- REMOTE USER LOCATION NOT FOUND\n" +
                                "- TAP Poll TO RESTART SESSION..."
                        }
                        
                        display.text = ""
                        display.text =
                            "local:\t\t( \(locPacket.latitude),\n" +
                            "\t\t\t\(locPacket.longitude) )\n" +
                            "remote:\t( \(locPacket.remoteLatitude),\n" +
                            "\t\t\t\(locPacket.remoteLongitude) )\n" +
                            "eta:\t\t\(String(describing: self.eta.getEta())) sec\n" +
                            "distance:\t\(String(describing: self.distance)) ft"
                    }
                }
            }

        }
    }
    
    @nonobjc func locationManager(manager: CLLocationManager!,
                                  didFailWithError error: NSError!) {

        print("-- locationManager -- didFailWithError: \(error.description)")
        //let alert: UIAlertControllerStyle = UIAlertControllerStyle.alert
        //let errorAlert = UIAlertController(title: "Error",
        //                                   message: "Failed to Get Your Location",
        //                                   preferredStyle: alert)
        //errorAlert.show(UIViewController(), sender: manager)
        
    }


    @IBAction func enable(_ sender: UIBarButtonItem) {
        // Entry point to start uploading the current location to iCloud repository

        print("\n=================================================================\n")
        print("@IBAction func enable()\n")
        print("\n=================================================================\n")

        // vars
        let latitude: CLLocationDegrees
        let longitude: CLLocationDegrees

        // init etaPointer
        /*
        print("-- enable -- pre -- self.eta.initializeMemory()")
        self.eta.initializeMemory()
        print("-- enable -- post -- self.eta.initializeMemory()")
        */

        // display locPacket
        display.text = ""
        display.text =
        "local:\t( \(locPacket.latitude),\n\t\t\(locPacket.longitude) )"
        
        // Upload locPacket to Cloud repository
        // Hardcode localuser for now
        let cloudRet = cloud.upload(packet: locPacket)
        if (cloudRet == false) {
            print("\n=============================================================\n")
            print("-- enable -- cloud.upload(locPacket) returned nil." +
                " Exiting enable\n")
            print("\n=============================================================\n")
            
            // display locPacket
            display.text = ""
            display.text =
            "local: \t( \(locPacket.latitude),\n \t\t\(locPacket.longitude) )\n" +
            "- upload to cloud failed"
            
            return
        }
        
        // recheck
        let fetchRet = cloud.fetchRecord()

        if (fetchRet.latitude == nil) {
            print("\n=============================================================\n")
            print("-- enable -- cloud.fetchRecord() returned nil: Exiting enable")
            print("\n=============================================================\n")
            
            // display locPacket
            display.text = ""
            display.text =
                "local: \t( \(locPacket.latitude),\n \t\(locPacket.longitude) )\n" +
                "- fetch after upload to cloud failed"
            
            return
        }
        
        (latitude, longitude) = fetchRet as! (CLLocationDegrees, CLLocationDegrees)
        
        print("-- enable -- latitude: \(latitude)")
        print("-- enable -- longitude: \(longitude)")

        // refresh mapView
        let center = CLLocationCoordinate2D(latitude: latitude, longitude: longitude)
        
        let span: MKCoordinateSpan = MKCoordinateSpan(latitudeDelta: 0.1,
                                                      longitudeDelta: 0.1)
        
        let region = MKCoordinateRegion(center: center, span: span)
        
        self.mapView.setRegion(region, animated: true)

        // this allows for uploading of coordinates on LocalUser location changes
        enabled_uploading = true

        print("-- enable -- end\n")
    
    }
    
    @IBAction func poll(_ sender: UIBarButtonItem) {
        // check for remoteUser record

        print("\n=================================================================\n")
        print("@IBAction func poll()")
        print("\n=================================================================\n")

        // stop location updates as this path is for the stationary user
        self.locationManager.stopUpdatingLocation()
        
        // vars
        var latitude: CLLocationDegrees
        var longitude: CLLocationDegrees
        //var pointAnnotation: MKPointAnnotation
        poll_entered += 1

        // start RemoteUser polling on 2nd tap... for now
        //  eta and distance checked at 1 sec interval
        if poll_entered > 1 {
            print("\n=============================================================\n")
            print("-- poll -- calling poll.pollRemote()")
            print("\n=============================================================\n")
    
            let x = self.eta.loadPointer()
            
            print("-- Poll -- pollRemote -- self.eta.loadPointer(): \(x)")
    
            poll.pollRemote(packet: locPacket, mapView: mapView,
                            mapUpdate: mapUpdate, eta: eta, display: display,
                            etaPointer: self.eta.etaPointer)
            
            print("-- poll -- poll(): return\n")
            
            return
        }
        
        // Upload locPacket to Cloud repository
        // Hardcode localuser for now
        let cloudRet = cloud.upload(packet: locPacket)
        if cloudRet == false {
            print("\n=============================================================\n")
            print("-- poll -- cloud.upload(locPacket) returned nil. Exiting poll()")
            print("\n=============================================================\n")
            
            // display locPacket
            display.text = ""
            display.text =
                "local:\t( \(locPacket.latitude),\n\t\t\(locPacket.longitude) )\n" +
                "- upload to cloud failed"
            
            poll_entered = 0;

            print("-- poll -- poll(): return\n")

            return
        }

        print("\n=================================================================\n")
        print("-- poll --  check for remote location record...")
        print("\n=================================================================\n")

        let fetchRet = poll.fetchRemote()
        
        if fetchRet.latitude == nil {
            print("\n=============================================================\n")
            print("-- poll -- poll.fetchRemote() returned nil. Exiting poll()")
            print("\n=============================================================\n")
            
            // display locPacket
            display.text = ""
            display.text =
                "local:\t( \(locPacket.latitude),\n\t\t\(locPacket.longitude) )\n" +
            "- fetchRemote failed"
    
            poll_entered = 0;

            print("-- poll -- poll(): return\n")
    
            return
        }
        
        (latitude, longitude) = fetchRet as! (CLLocationDegrees, CLLocationDegrees)
        print("-- poll -- remote latitude: \(latitude)")
        print("-- poll -- remote longitude: \(longitude)")
        
        // stuff Location structure
        locPacket.setRemoteLatitude(latitude: latitude)
        locPacket.setRemoteLongitude(longitude: longitude)

        // add pin on mapView for remoteUser, re-center mapView, update span
        let remove: Bool = false
        mapUpdate.addPin(packet: locPacket, mapView: mapView, remove)

        // get ETA and distance, [and refresh mapview from eta.getEtaDistance: FIX]
        print("\n=================================================================\n")
        print("-- poll -- eta.getEtaDistance...")
        print("\n=================================================================\n")
       
        eta.getEtaDistance (packet: locPacket, mapView: mapView, display: display,
                                  etaPointer: self.eta.etaPointer, mapUpdate: mapUpdate)

        // this allows for uploading of coordinates on location changes
        //enabled_uploading = true // WHY HERE?

        print("-- poll -- return\n")

        return
    }
  

    @IBAction func disable(_ sender: UIBarButtonItem) {
        // Remove location record from iCloud repository.

        print("\n===============================================================\n")
        print("@IBAction func disable()\n")
        print("\n===============================================================\n")

        display.text = ""
        
        cloud.deleteRecord()
        
        let remove: Bool = true
        
        mapUpdate.addPin(packet: locPacket, mapView: mapView, remove)
        
        // refresh mapView for possible poll use
        let center = CLLocationCoordinate2D(latitude: locPacket.latitude,
                                            longitude: locPacket.longitude)
        
        let span: MKCoordinateSpan = MKCoordinateSpan(latitudeDelta: 0.1,
                                                      longitudeDelta: 0.1)
        
        let region = MKCoordinateRegion(center: center, span: span)
        
        self.mapView.setRegion(region, animated: true)
    
        // stop location updates as this path is for the stationary user
        self.locationManager.stopUpdatingLocation()

        enabled_uploading = false
        
    }
    
    func check_remote() -> Bool {
        print("\n===============================================================\n")
        print("func check_remote()")
        print("\n===============================================================\n")

        var latitude: CLLocationDegrees
        var longitude: CLLocationDegrees

        let fetchRet = poll.fetchRemote()
        
        if (fetchRet.latitude == nil) {
            return false
        }
        (latitude, longitude) = fetchRet as! (CLLocationDegrees, CLLocationDegrees)
        
        locPacket.setRemoteLatitude(latitude: latitude)
        locPacket.setRemoteLongitude(longitude: longitude)

        print("-- check_remote -- mapUpdate.addPin()")
        let remove: Bool = false
        _ = mapUpdate.addPin(packet: locPacket, mapView: mapView, remove)
        
        //print("-- check_remote -- self.etaPointer.initializeMemory()")
        //self.etaPointer.initializeMemory(as: TimeInterval.self, count: 64, to: 0.0)

        print("-- check_remote -- eta.getEtaDistance()")
    
        eta.getEtaDistance(packet: locPacket, mapView: mapView, display: display,
                                  etaPointer: self.eta.etaPointer, mapUpdate: mapUpdate)
        
        return true
    }

}
